#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
    EULER 2
        Each new term in the Fibonacci sequence is generated by adding the
        previous two terms. By starting with 1 and 2,
        the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
        By considering the terms in the Fibonacci sequence whose values do not
        exceed four million, find the sum of the even-valued terms.
"""
# =============================================================================
# (upper left label is the current label)
#
# SOLUTION: 4613732
#
# STATUS: [ok]
# VERIFIED:[ok]
# EXECUTION TIME: [ok]
# =============================================================================

def fib(n):
    a,b = 1,2
    for i in range(n-1):
        a,b = b,a+b
    return(a)

def euler2(maximo_valores):
    count = 1
    fibo = fib(count)
    total_even_sum=0
    while True:
        fibo = fib(count)
        if fibo <= maximo_valores:
            if fibo%2 == 0:
                total_even_sum += fibo
            count +=1
            continue
        break
    return total_even_sum


if __name__ == "__main__":
    print(euler2(89))
#23
    print(euler2(4000000))
#4613732
